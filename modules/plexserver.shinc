# avoid double inclusion
if test "${plexserver__imported+defined}" == "defined"; then
  return 0
fi
plexserver__imported=1


# Service Status & App Config Output
# ---------------------------------------------------------------------------------------

function plexserver__get_status() {
  if service plexmediaserver status 2>&1 | grep -q "unrecognized service"; then
    status="Not Installed"
  elif service plexmediaserver status 2>&1 | egrep -q "start|running"; then
    if ! ls -l /etc/init/plexmediaserver.override > /dev/null 2>&1; then
      status="Enabled|Running"
    else
      status="Disabled|Running"
    fi
  elif ! ls -l /etc/init/plexmediaserver.override > /dev/null 2>&1; then
    status="Enabled|Stopped"
  else
    status="Disabled|Stopped"
  fi
  echo "$status"
}

function plexserver__show_config() {
  status="$(plexserver__get_status)"

  echo "Plex Media Server Config:"
  echo "----------------------------"
  echo "Status: $status"
  if [ "$status" == "Enabled|Running" ]; then
	  username=$(plexserver__get_plexpass_username)
	  password=$(plexserver__get_plexpass_password)
    port="32400"
    ipv4=$(tools__get_ip)
    
    echo "Web UI: http://$ipv4:$port/web"
    echo
    echo "Plex Pass Username: $username"
    echo "Plex Pass Password: $password"
  fi
}


# Service Controls
# ---------------------------------------------------------------------------------------

function plexserver__enable() {
  if echo "$(plexserver__get_status)" | grep -q "^Disabled"; then
    echo "* Enabling Plex Media Server"
    rm -v /etc/init/plexmediaserver.override
  fi
}

function plexserver__disable() {
  if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
    echo "* Disabling Plex Media Server"
    plexserver__stop
    tar xf $configBundle --strip-components 2 -C /etc/init/ config/init/plexmediaserver.override
    echo "added \`/etc/init/plexmediaserver.override'"
  fi
}

function plexserver__start() {
  if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
    for i in {1..3}; do
      if [ $i -gt 1 ]; then
        sleep 5
      fi
      if [ "$(plexserver__get_status)" != "Enabled|Running" ]; then
        service plexmediaserver start
      else
        break
      fi
    done
  fi
}

function plexserver__stop() {
  for i in {1..3}; do
    if [ $i -gt 1 ]; then
      sleep 5
    fi
    if echo "$(plexserver__get_status)" | grep -q "Running$"; then
      service plexmediaserver stop
    else
      break
    fi
  done
}


# Get App Configuration
# ---------------------------------------------------------------------------------------

function plexserver__get_plexpass_username() {
  username=$(grep "^username " $plexpassConfig 2> /dev/null | awk '{ print $3 }')
  
  echo "$username"
}

function plexserver__get_plexpass_password() {
  password=$(grep "^password " $plexpassConfig 2> /dev/null | awk '{ print $3 }')
  
  echo "$password"
}


# Set App Configuration
# ---------------------------------------------------------------------------------------

function plexserver__set_plexpass_username() {
  username="$1"
  username=$(echo "$username" | sed 's/\//\\\//g')
  
  if ! grep -q "username =" $plexpassConfig 2> /dev/null; then
    sudo su -c -u $osUser \
      "echo 'username = ' >> $plexpassConfig"
  fi
  
  sed -i 's/^username .*/username = '$username'/g' $plexpassConfig
}

function plexserver__set_plexpass_password() {
  password="$1"
  password=$(echo "$password" | sed 's/\//\\\//g')

  if ! grep -q "password =" $plexpassConfig 2> /dev/null; then
    sudo su -c -u $osUser \
      "echo 'password = ' >> $plexpassConfig"
  fi

  sed -i 's/^password .*/password = '$password'/g' $plexpassConfig
}


# Install, Configure & Upgrade
# ---------------------------------------------------------------------------------------

function plexserver__deploy_appdata() {
  # Copy the config/data directory into appdata
  if [ ! -d "$plexserverData" ]; then
    sudo su -c -u $osUser \
      "tar xf $appdataBundle --strip-components 1 -C $tretflixPath/appdata/ appdata/plexmediaserver"
  fi
}

function plexserver__install() {
  username=$(plexserver__get_plexpass_username)
	password=$(plexserver__get_plexpass_password)
  
  echo "* Installing Plex Media Server"

  # Get URL for latest available build
  url=$(plexserver__get_download_url "$username" "$password")
  
  # Extract the installer filename from the URL
  filename=$(basename "$url")

  wget -O /tmp/"$filename" "$url"
  if [ $? -ne 0 ]; then
    echo "Download failed"
    echo
    exit 1
  fi

  gdebi --n /tmp/"$filename"
  if [ $? -ne 0 ]; then
    echo "Installation failed"
    echo
    exit 1
  fi
    
  rm -vf /tmp/"$filename"
  
  # Stop the app, apt-get install sometimes automatically enables and starts apps
  plexserver__stop
  
  # Copy/Replace the init file
  tar xf $configBundle --strip-components 2 -C /etc/init/ config/init/plexmediaserver.conf
  
  # Copy/Replace the default config file
  tar xf $configBundle --strip-components 2 -C /etc/default/ config/default/plexmediaserver
}


function plexserver__uninstall() {

  echo "* Uninstalling Plex Media Server and purging config files"
  echo

  # Stop the app
  plexserver__stop

  # remove plex
  sudo apt-get -y -q remove --purge plexmediaserver

  sudo apt-get -y autoremove

}


function plexserver__upgrade() {
  username=$(plexserver__get_plexpass_username)
	password=$(plexserver__get_plexpass_password)
  
  echo "* Upgrading Plex Media Server"
  
  # Get URL for latest available build
  url=$(plexserver__get_download_url "$username" "$password")
  
  # Extract the installer filename from the URL
  filename=$(basename "$url")

  wget -O /tmp/"$filename" "$url"
  if [ $? -ne 0 ]; then
    echo "Download failed"
    echo
    exit 1
  fi

  plexserver__stop
  gdebi --n /tmp/"$filename"
  if [ $? -ne 0 ]; then
    echo "Installation failed"
    echo
    exit 1
  fi
    
  rm -vf /tmp/"$filename"
}

function plexserver__version_check() {
  username=$(plexserver__get_plexpass_username)
	password=$(plexserver__get_plexpass_password)
  
  # Get URL for latest available build
  url=$(plexserver__get_download_url "$username" "$password")
  
  # Extract the installer filename from the URL
  filename=$(basename "$url")
  
  # Get the installed & candidate versions
  output=$(apt-cache policy plexmediaserver 2>&1)
  installedVers=$(echo "$output" | grep "Installed:" | awk '{ print $2 }' | sed 's/-.*$//')
  candidateVers=$(echo "$filename" | sed 's/^[a-z]*_//g' | sed 's/_.*$//g' | sed 's/-.*$//')
  
  if [ "$installedVers" == "$candidateVers" ]; then
    echo "Plex Media Server is up-to-date"
    false
  else
    true
  fi
}

function plexserver__get_download_url() {
  username=$(plexserver__get_plexpass_username)
	password=$(plexserver__get_plexpass_password)
	
	if [ "$username" ];then

		# Get the sign in authenticity token
		loginPage=$(wget --keep-session-cookies --save-cookies /tmp/cookies.txt https://plex.tv/users/sign_in -q -O -)
		authToken=$(echo "$loginPage" | sed -n '/value=".*=="/ s/.*\(value=".*=="\).*/\1/p' | sed 's/value="//' | sed 's/"$//')

		# Sign in
		wget --load-cookies /tmp/cookies.txt --keep-session-cookies --save-cookies /tmp/cookies.txt \
			--post-data='user[login]='$username'&user[password]='$password'&authenticity_token='$authToken'' \
			https://plex.tv/users/sign_in -q -O - > /dev/null

    # Get plex pass downloads page source
    downloadPage=$(wget --load-cookies /tmp/cookies.txt https://plex.tv/downloads?channel=plexpass -q -O -)
    
    # Delete the cookies file
    rm /tmp/cookies.txt
    
  else
    # Get the normal downloads page source
    downloadPage=$(wget https://plex.tv/downloads -q -O -)
  fi
  
  if uname -a | grep -q "i386"; then
    url=$(echo "$downloadPage" | sed '/<h3>Ubuntu<h3>/,/<h3>/!d;//d' | \
      sed -n '/href=".*i386.deb"/ s/.*\(href=".*i386.deb"\).*/\1/p' | sed 's/href="//' | sed 's/"$//')    
  else
    url=$(echo "$downloadPage" | sed '/<h3>Ubuntu<h3>/,/<h3>/!d;//d' | \
      sed -n '/href=".*amd64.deb"/ s/.*\(href=".*amd64.deb"\).*/\1/p' | sed 's/href="//' | sed 's/"$//')
  fi
  
  echo "$url"
}


# Misc, Extras
# ---------------------------------------------------------------------------------------

function plexserver__fixit() {
  echo "Coming Soon..."
}
