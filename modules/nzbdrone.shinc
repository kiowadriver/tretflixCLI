# avoid double inclusion
if test "${nzbdrone__imported+defined}" == "defined"; then
  return 0
fi
nzbdrone__imported=1


# Service Status & App Config Output
# ---------------------------------------------------------------------------------------

function nzbdrone__get_status() {
  if service nzbdrone status 2>&1 | grep -q "unrecognized service"; then
    status="Not Installed"
  elif service nzbdrone status 2>&1 | egrep -q "start|running"; then
    if ! ls -l /etc/init/nzbdrone.override > /dev/null 2>&1; then
      status="Enabled|Running"
    else
      status="Disabled|Running"
    fi
  elif ! ls -l /etc/init/nzbdrone.override > /dev/null 2>&1; then
    status="Enabled|Stopped"
  else
    status="Disabled|Stopped"
  fi
  echo "$status"
}

function nzbdrone__show_config() {
  status=$(nzbdrone__get_status)

  echo "NzbDrone Config:"
  echo "----------------------------"
  echo "Status: $status"
  if [ "$status" == "Enabled|Running" ]; then
		username=$(nzbdrone__get_username)
		password=$(nzbdrone__get_password)
		port=$(nzbdrone__get_port)
		apikey=$(nzbdrone__get_apikey)
		ipv4=$(tools__get_ip)
	
		if echo "$(proxy__get_status)" | egrep -q "^Enabled|Running$"; then
			url="http://$ipv4/nzbdrone"
		else
			url="http://$ipv4:$port/"
		fi
		
    echo "Web UI: $url"
    echo
    echo "Username: $username"
    echo "Password: $password"
    echo "API Key: $apikey"
  fi
}


# Service Controls
# ---------------------------------------------------------------------------------------

function nzbdrone__enable() {
  if echo "$(nzbdrone__get_status)" | grep -q "^Disabled"; then
    echo "* Enabling NzbDrone"
    rm -v /etc/init/nzbdrone.override
  fi
}

function nzbdrone__disable() {
  if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
    echo "* Disabling NzbDrone"
    nzbdrone__stop
    tar xf $configBundle --strip-components 2 -C /etc/init/ config/init/nzbdrone.override
    echo "added \`/etc/init/nzbdrone.override'"
  fi
}

function nzbdrone__start() {
  if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
    for i in {1..3}; do
      if [ $i -gt 1 ]; then
        sleep 2
      fi
      if [ "$(nzbdrone__get_status)" != "Enabled|Running" ]; then
        service nzbdrone start
      else
        break
      fi
    done
  fi
}

function nzbdrone__stop() {
  for i in {1..3}; do
    if [ $i -gt 1 ]; then
      sleep 2
    fi
    if echo "$(nzbdrone__get_status)" | grep -q "Running$"; then
      service nzbdrone stop
    else
      break
    fi
  done
}


# Get App Configuration
# ---------------------------------------------------------------------------------------

function nzbdrone__get_username() {
  username=$(grep "<Username>.*</Username>" $nzbdroneConfig | awk -F "[<>]" '{ print $3 }')
  
  echo "$username"
}

function nzbdrone__get_password() {
  password=$(grep "<Password>.*</Password>" $nzbdroneConfig | awk -F "[<>]" '{ print $3 }')
  
  echo "$password"
}

function nzbdrone__get_port() {
  port=$(grep "<Port>.*</Port>" $nzbdroneConfig | awk -F "[<>]" '{ print $3 }')
  
  echo "$port"
}

function nzbdrone__get_apikey() {
  apikey=$(grep "<ApiKey>.*</ApiKey>" $nzbdroneConfig | awk -F "[<>]" '{ print $3 }')
  
  echo "$apikey"
}

function nzbdrone__get_sabnzbd_settings() {
  settings=$(sqlite3 $nzbdroneDB "SELECT Settings from DownloadClients WHERE Implementation='Sabnzbd'")
  
  echo "$settings"
}

function nzbdrone__get_plexserver_settings() {
  settings=$(sqlite3 $nzbdroneDB "SELECT Settings from Notifications WHERE Implementation='PlexServer'")
  
  echo "$settings"
}


# Set App Configuration
# ---------------------------------------------------------------------------------------

function nzbdrone__set_username() {
  username="$1"
  username=$(echo "$username" | sed 's/\//\\\//g')

  nzbdrone__stop
  sed -i 's#\(<Username>\).*\(</Username>\)#\1'$username'\2#g' $nzbdroneConfig
}

function nzbdrone__set_password() {
  password="$1"
  password=$(echo "$password" | sed 's/\//\\\//g')

  nzbdrone__stop
  sed -i 's#\(<Password>\).*\(</Password>\)#\1'$password'\2#g' $nzbdroneConfig
}

function nzbdrone__set_port() {
  port="$1"
  port=$(echo "$port" | sed 's/\//\\\//g')

  nzbdrone__stop
  sed -i 's#\(<Port>\).*\(</Port>\)#\1'$port'\2#g' $nzbdroneConfig
}

function nzbdrone__set_apikey() {
  apikey="$1"
  apikey=$(echo "$apikey" | sed 's/\//\\\//g')

  nzbdrone__stop
  sed -i 's#\(<ApiKey>\).*\(</ApiKey>\)#\1'$apikey'\2#g' $nzbdroneConfig
}

function nzbdrone__set_urlbase() {
  urlbase="nzbdrone"
  urlbase=$(echo "$urlbase" | sed 's/\//\\\//g')

  nzbdrone__stop
  if grep -A 1 "<UrlBase>$" $nzbdroneConfig | grep -q "</UrlBase>$"; then
    sed -i '/<\/UrlBase>$/d' $nzbdroneConfig
    sed -i 's/<UrlBase>$/<UrlBase><\/UrlBase>/' $nzbdroneConfig
  fi
  
  sed -i 's#\(<UrlBase>\).*\(</UrlBase>\)#\1'$urlbase'\2#g' $nzbdroneConfig
}

function nzbdrone__set_sabnzbd_enabled() {
	if [[ -z $(nzbdrone__get_sabnzbd_settings) ]]; then
		# Build "Settings" for a new SABnzbd record
		settings="
		\"host\": \"localhost\",
		\"port\": 8080,
		\"apiKey\": \"mjgwnjbhnzm0njk4zmi2mwqzyjnjmjy2\",
		\"username\": \"admin\",
		\"password\": \"admin\",
		\"tvCategory\": \"nzbdrone\",
		\"recentTvPriority\": 0,
		\"olderTvPriority\": 0,
		\"useSsl\": false"
      
    # Clean up formatting
	  settings=$(echo "$settings" | sed '/^$/d' | sed -e 's/^[ \t]*/  /')
	  settings=$(echo -e "{\n$settings\n}")
	  
	  # Add/Insert the new SABnzbd record
	  nzbdrone__stop
		sqlite3 $nzbdroneDB "INSERT INTO DownloadClients VALUES(?, 1,'Sabnzbd','Sabnzbd','$settings','SabnzbdSettings',1)"
	else
	  # Enable the existing SABnzbd record
	  nzbdrone__stop
	  sqlite3 $nzbdroneDB "UPDATE DownloadClients SET Enable='1' Implementation='Sabnzbd'"
	fi
}

function nzbdrone__set_sabnzbd_settings() {
	port="$1"
	apikey="$2"
	username="$3"
	password="$4"
	host="$5"
	category="$6"
	
	port=$(echo "$port" | sed 's/\//\\\//g')
	apikey=$(echo "$apikey" | sed 's/\//\\\//g')
	username=$(echo "$username" | sed 's/\//\\\//g')
	password=$(echo "$password" | sed 's/\//\\\//g')
	host=$(echo "$host" | sed 's/\//\\\//g')
	category=$(echo "$category" | sed 's/\//\\\//g')
	
  # Get the existing SABnzbd record "Settings"
	settings=$(nzbdrone__get_sabnzbd_settings)
	
	# Modifwy the existing SABnzbd record "Settings"
	settings=$(echo "$settings" | sed 's/  "username": ".*",$/  "username": "'$username'",/')
	settings=$(echo "$settings" | sed 's/  "password": ".*",$/  "password": "'$password'",/')
	settings=$(echo "$settings" | sed 's/  "host": ".*",$/  "host": "'$host'",/')
	settings=$(echo "$settings" | sed 's/  "port": .*,$/  "port": '$port',/')
	settings=$(echo "$settings" | sed 's/  "apiKey": ".*",$/  "apiKey": "'$apikey'",/')
	settings=$(echo "$settings" | sed 's/  "tvCategory": ".*",$/  "tvCategory": "'$category'",/')
  
  # Update the existing SABnzbd record w/ the modified "Settings"
  nzbdrone__stop
  sqlite3 $nzbdroneDB "UPDATE DownloadClients SET Settings='$settings' WHERE Implementation='Sabnzbd'"
}

function nzbdrone__set_plexserver_enabled() {
	if [[ -z $(nzbdrone__get_plexserver_settings) ]]; then
	  # Build "Settings" for a new Plex Media Server record
	  settings="
		\"port\": 32400,
		\"host\": \"localhost\",
		\"updateLibrary\": true,
		\"isValid\": true"
      
    # Clean up formatting
	  settings=$(echo "$settings" | sed '/^$/d' | sed -e 's/^[ \t]*/  /')
	  settings=$(echo -e "{\n$settings\n}")
	  
	  # Add/Insert the new Plex Media Server record
	  nzbdrone__stop
		sqlite3 $nzbdroneDB "INSERT INTO Notifications VALUES(?,'Tretflix',1,1,'$settings','PlexServer','PlexServerSettings',1)"
	fi
}

function nzbdrone__set_plexserver_settings() {  
	port="$1"
	host="$2"
	
	port=$(echo "$port" | sed 's/\//\\\//g')
	host=$(echo "$host" | sed 's/\//\\\//g')
	
  # Get the existing Plex Media Server record "Settings"
	settings=$(nzbdrone__get_plexserver_settings)
	
	# Modify the existing Plex Media Server record "Settings"
	settings=$(echo "$settings" | sed 's/  "host": ".*",$/  "host": "'$host'",/')
	settings=$(echo "$settings" | sed 's/  "port": .*,$/  "port": '$port',/')
	settings=$(echo "$settings" | sed 's/  "updateLibrary": .*,$/  "updateLibrary": true,/') 
  
  # Update the existing Plex Media Server record w/ the modified "Settings"
  nzbdrone__stop
  sqlite3 $nzbdroneDB "UPDATE Notifications SET Settings='$settings' WHERE Implementation='PlexServer'"
}


# Enable, Disable & Configure Supporting Apps
# ---------------------------------------------------------------------------------------

# SABnzbd Section
# ---------------------------

function nzbdrone__config_sabnzbd() {
	port="$1"
	apikey="$2"
	username="$3"
	password="$4"	
	host="localhost"
	category="nzbdrone"
	
	echo "* Updating NzbDrone's SABnzbd+ Support"
	nzbdrone__set_sabnzbd_enabled
	nzbdrone__set_sabnzbd_settings "$port" "$apikey" "$username" "$password" "$host" "$category"
}

# Plex Media Server Section
# ---------------------------

function nzbdrone__config_plexserver() {
  port="32400"
  host="localhost"
  
  echo "* Updating NzbDrone's Plex Media Support"
	nzbdrone__set_plexserver_enabled
	nzbdrone__set_plexserver_settings "$port" "$host"
}

# Reverse Proxy Section
# ---------------------------

function nzbdrone__config_proxy() {
  urlbase="/nzbdrone"
  
  echo "* Updating NzbDrone's Reverse Proxy Support"
  nzbdrone__set_urlbase "$urlbase"
}


# Install, Configure & Upgrade
# ---------------------------------------------------------------------------------------

function nzbdrone__install() {
  echo "* Installing NzbDrone"
  
    # Add the updated libmono apt repository
  if [ ! -f "/etc/apt/sources.list.d/directhex-monoxide-trusty.list" ]; then
    add-apt-repository -y ppa:directhex/monoxide
    
    # Update apt repository package lists
    apt-get update
  fi
  
  # Install updated libmono
  apt-get -q -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
    install libmono-2.0-1
  
  # Add apt repository to sources.list
  if ! grep -q "^deb http://update.nzbdrone.com/repos/apt/debian master main" /etc/apt/sources.list; then 
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys FDA5DFFC
    echo "deb http://update.nzbdrone.com/repos/apt/debian master main" | tee -a /etc/apt/sources.list
    
    # Update apt repository package lists
    apt-get update
  fi
  
  # Install NzbDrone
  apt-get -q -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
    install nzbdrone
  
  # Stop the app, apt-get install sometimes automatically enables and starts apps
  nzbdrone__stop
  
  # Copy/Replace the init file
  tar xf $configBundle --strip-components 2 -C /etc/init/ config/init/nzbdrone.conf

  # Copy the config/data directory into appdata
  if [ ! -d "$nzbdroneData" ]; then
    sudo su -c -u $osUser \
      "tar xf $appdataBundle --strip-components 1 -C $tretflixPath/appdata/ appdata/nzbdrone"
  fi
  
  # Create a Symlink to the appdata directory
  if [ -d "/home/$osUser/.config/NzbDrone" ]; then
    # If NzbDrone appdata directory exists at the default path, move it and link to the tretflix appdata path
    if [ "$(realpath /home/$osUser/.config/NzbDrone)" != "$nzbdroneData" ]; then
      sudo su -c -u $osUser \
        "mv /home/$osUser/.config/NzbDrone /home/$osUser/NzbDrone.tretflix_backup"

      sudo su -c -u $osUser \
        "ln -s $nzbdroneData /home/$osUser/.config/NzbDrone"                
    fi
    
  else
    # Create the ~/.config directory if necessary
    if [ ! -d "/home/$osUser/.config" ]; then
      sudo su -c -u $osUser \
        "mkdir /home/$osUser/.config"
    fi
    
    # Create the symbolic link in ~/.config
    sudo su -c -u $osUser \
      "ln -s $nzbdroneData /home/$osUser/.config/NzbDrone"
  fi
}

function nzbdrone__uninstall() {
  echo "* Uninstalling NzbDrone"
  echo

   nzbdrone__stop

    # Remove the updated libmono apt repository
  if [ -f "/etc/apt/sources.list.d/directhex-monoxide-trusty.list" ]; then
    
     sudo rm /etc/apt/sources.list.d/directhex-monoxide-trusty.list

    # Update apt repository package lists
    sudo apt-get -y update
  fi

  # uninstall updated libmono and nzbdrone
  sudo apt-get -y -q purge libmono-2.0-1 nzbdrone

  # Remove the init file
  if [ -e "/etc/init/nzbdrone.conf" ]; then
    sudo rm /etc/init/nzbdrone.conf
    sudo rm /etc/default/nzbdrone*
  fi

  # Remove the config/data directory into appdata
  if [ -d "$nzbdroneData" ]; then
    sudo rm -r "$tretflixPath/appdata/nzbdrone"
  fi

}


function nzbdrone__upgrade() {  
  echo "* Upgrading NzbDrone"
  
  nzbdrone__stop
  apt-get -q -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
    uninstall nzbdrone
}

function nzbdrone__version_check() {
  output=$(apt-cache policy nzbdrone 2>&1)
  installedVers=$(echo "$output" | grep "Installed:" | awk '{ print $2 }')
  candidateVers=$(echo "$output" | grep "Candidate:" | awk '{ print $2 }')

  if [ "$installedVers" == "$candidateVers" ]; then
    echo "NzbDrone is up-to-date"
    false
  else
    true
  fi
}


# Misc, Extras
# ---------------------------------------------------------------------------------------

function nzbdrone__fixit() {
  echo "Coming Soon..." > /dev/null
}
