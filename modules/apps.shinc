# avoid double inclusion
if test "${apps__imported+defined}" == "defined"; then
  return 0
fi
apps__imported=1

function apps__help() {
  echo "Usage: tretflix apps [OPTION] [COMMAND] [INPUT]"
  echo
  echo "COMMANDS:"
  echo "  tretflix apps [OPTION] enable"
  echo "  tretflix apps [OPTION] disable"
  echo "  tretflix apps [OPTION] upgrade"
  echo "  tretflix apps [OPTION] set username [USERNAME]"
  echo "  tretflix apps [OPTION] set password [PASSWORD]"
  echo "  tretflix apps [OPTION] set port [PORT]"
  echo "  tretflix apps [OPTION] new apikey"
  echo "  tretflix apps [OPTION] show config"
  echo
  echo "OPTIONS:"
  echo "  -a, --all"
  echo "  -c, --couchpotato"
  echo "  -h, --headphones"
  echo "  -n, --nzbdrone"
  echo "  -p, --plexserver"
  echo "  -s, --sabnzbd"
  echo "  -b, --sickbeard"
  echo "  -r, --sickrage"
  echo "  -t, --transmission"
  echo "  -d, --delugeweb"
  echo
  echo "NOTES:" 
  echo "  The 'new apikey' command is only available for the apps that use"
  echo "  api keys. The 'set port' command requires an individual app to be"
  echo "  specified."
  echo
  exit 1
}

function apps__command_handler() {
  if test "${CLI_ARGS[3]+isset}"; then
    case "${CLI_ARGS[2]} ${CLI_ARGS[3]}" in
      'set username')
        if [ "${#CLI_ARGS[@]}" -eq 5 ]; then
          apps__set_username "${CLI_ARGS[1]}" "${CLI_ARGS[4]}"
        else
          apps__help
        fi
        ;;
      'set password')
        if [ "${#CLI_ARGS[@]}" -eq 5 ]; then
          apps__set_password "${CLI_ARGS[1]}" "${CLI_ARGS[4]}"
        else
          apps__help
        fi
        ;;
      'set port')
        if [ "${#CLI_ARGS[@]}" -eq 5 ]; then
          apps__set_port "${CLI_ARGS[1]}" "${CLI_ARGS[4]}"
        else
          apps__help
        fi
        ;;
      'new apikey')
        if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
          apps__new_apikey "${CLI_ARGS[1]}"
        else
          apps__help
        fi
        ;;
      'show config')
        if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
          apps__show_config "${CLI_ARGS[1]}"
        else
          apps__help
        fi
        ;;			
      *)
        apps__help
    esac
  elif test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[2]}" in
      enable)
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          apps__enable "${CLI_ARGS[1]}"
        else
          apps__help
        fi
        ;;
      disable)
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          apps__disable "${CLI_ARGS[1]}"
        else
          apps__help
        fi
        ;;
      upgrade)
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          apps__upgrade "${CLI_ARGS[1]}"
        else
          apps__help
        fi
        ;;
      *)
        apps__help
    esac
  else
    apps__help
  fi
}

function apps__enable() {
  option="$1"

	case "$option" in
		'-a' | '--all')
      apps__allapps "enable"
      
			# Display Config Output
			echo
			apps__allapps "show config"
			;;
		'-c' | '--couchpotato')
      apps__couchpotato "enable"
      
			# Display Config Output
			echo
			couchpotato__show_config
			;;
		'-h' | '--headphones')
      apps__headphones "enable"
      
			# Display Config Output
			echo
			headphones__show_config
			;;
		'-n' | '--nzbdrone')
      apps__nzbdrone "enable"
      
			# Display Config Output
			echo
			nzbdrone__show_config
			;;
		'-p' | '--plexserver')
      apps__plexserver "enable"
      
			# Display Config Output
			echo
			plexserver__show_config
			;;
		'-s' | '--sabnzbd')
      apps__sabnzbd "enable"
      
			# Display Config Output
			echo
			sabnzbd__show_config
			;;
		'-b' | '--sickbeard')
      apps__sickbeard "enable"
      
			# Display Config Output
			echo
			sickbeard__show_config
			;;
		'-r' | '--sickrage')
      apps__sickrage "enable"
      
			# Display Config Output
			echo
			sickrage__show_config
			;;
		'-t' | '--transmission')		
      apps__transmission "enable"
      
			# Display Config Output
			echo
			transmission__show_config
			;;
		'-d' | '--delugeweb')		
      apps__delugeweb "enable"
      
			# Display Config Output
			echo
			delugeweb__show_config
			;;
		*)
			apps__help
	esac
}

function apps__disable() {
  option="$1"
  
	case "$option" in
		'-a' | '--all')
		  apps__allapps "disable"
		  
			# Display Config Output
			echo
			apps__allapps "show config"
      ;;
		'-c' | '--couchpotato')
      apps__couchpotato "disable"
      
			# Display Config Output
			echo
			couchpotato__show_config
			;;
		'-h' | '--headphones')
      apps__headphones "disable"
      
			# Display Config Output
			echo
			headphones__show_config
			;;
		'-n' | '--nzbdrone')
      apps__nzbdrone "disable"
      
			# Display Config Output
			echo
			nzbdrone__show_config
			;;
		'-p' | '--plexserver')
      apps__plexserver "disable"

			# Display Config Output
			echo
			plexserver__show_config
			;;
		'-s' | '--sabnzbd')
      apps__sabnzbd "disable"

			# Display Config Output
			echo
			sabnzbd__show_config
			;;
		'-b' | '--sickbeard')
      apps__sickbeard "disable"
      
			# Display Config Output
			echo
			sickbeard__show_config
			;;
		'-r' | '--sickrage')
      apps__sickrage "disable"
      
			# Display Config Output
			echo
			sickrage__show_config
			;;			
		'-t' | '--transmission')
      apps__transmission "disable"
      
			# Display Config Output
			echo
			transmission__show_config
			;;
	 	'-d' | '--delugeweb')
      apps__delugeweb "disable"
      
			# Display Config Output
			echo
			delugeweb__show_config
			;;
		*)
			apps__help
	esac
}

function apps__upgrade() {
  option="$1"

	case "$option" in
		'-a' | '--all')
      apps__allapps "upgrade"
      
			# Display Config Output
			echo
			apps__allapps "show config"
      ;;
		'-c' | '--couchpotato')
			apps__couchpotato "upgrade"

			# Display Config Output
			echo
			couchpotato__show_config
			;;
		'-h' | '--headphones')
			apps__headphones "upgrade"

			# Display Config Output
			echo
			headphones__show_config
			;;
		'-n' | '--nzbdrone')
			apps__nzbdrone "upgrade"

			# Display Config Output
			echo
			nzbdrone__show_config
			;;
		'-p' | '--plexserver')
			apps__plexserver "upgrade"

			# Display Config Output
			echo
			plexserver__show_config
			;;
		'-s' | '--sabnzbd')
      apps__sabnzbd "upgrade"

			# Display Config Output
			echo
			sabnzbd__show_config
			;;
		'-b' | '--sickbeard')
      apps__sickbeard "upgrade"

			# Display Config Output
			echo
			sickbeard__show_config
			;;
		'-r' | '--sickrage')
      apps__sickrage "upgrade"

			# Display Config Output
			echo
			sickrage__show_config
			;;			
		'-t' | '--transmission')
      apps__transmission "upgrade"

			# Display Config Output
			echo
			transmission__show_config
			;;
		'-d' | '--delugeweb')
      apps__transmission "upgrade"

			# Display Config Output
			echo
			delugeweb__show_config
			;;
		*)
			apps__help
	esac
}

function apps__set_username() {
  option="$1"
  username="$2"

	case "$option" in
		'-a' | '--all')
      apps__allapps "set username" "$username"
            
			# Display Config Output
			echo
			apps__allapps "show config"
			;;  
		'-c' | '--couchpotato')
      apps__couchpotato "set username" "$username"
      
			# Display Config Output
			echo
			couchpotato__show_config
			;;
		'-h' | '--headphones')
      apps__headphones "set username" "$username"
      
			# Display Config Output
			echo
			headphones__show_config
			;;
		'-n' | '--nzbdrone')
      apps__nzbdrone "set username" "$username"
      
			# Display Config Output
			echo
			nzbdrone__show_config
			;;
		'-p' | '--plexserver')
      apps__plexserver "set username" "$username"
      
			# Display Config Output
			echo
			plexserver__show_config
			;;
		'-s' | '--sabnzbd')
      apps__sabnzbd "set username" "$username"
      
			# Display Config Output
			echo
			sabnzbd__show_config
			;;
		'-b' | '--sickbeard')
      apps__sickbeard "set username" "$username"
      
			# Display Config Output
			echo
			sickbeard__show_config
			;; 
		'-r' | '--sickbeard')
	apps__sickrage "set username" "$username"
      
			# Display Config Output
			echo
			sickrage__show_config
			;;  			
		'-t' | '--transmission')
      apps__transmission "set username" "$username"
      
			# Display Config Output
			echo
			transmission__show_config
			;;
		'-d' | '--delugeweb')
      apps__transmission "set username" "$username"
      
			# Display Config Output
			echo
			delugeweb__show_config
			;;
		*)
			apps__help
	esac
}

function apps__set_password() {
  option="$1"
  password="$2"
  
	case "$option" in
		'-a' | '--all')
      apps__allapps "set password" "$password"
            
			# Display Config Output
			echo
			apps__allapps "show config"
			;;   
		'-c' | '--couchpotato')
      apps__couchpotato "set password" "$password"
            
			# Display Config Output
			echo
			couchpotato__show_config
			;;
		'-h' | '--headphones')
      apps__headphones "set password" "$password"
            
			# Display Config Output
			echo
			headphones__show_config
			;;
		'-n' | '--nzbdrone')
      apps__nzbdrone "set password" "$password"
            
			# Display Config Output
			echo
			nzbdrone__show_config
			;;
		'-p' | '--plexserver')
      apps__plexserver "set password" "$password"
            
			# Display Config Output
			echo
			plexserver__show_config
			;;
		'-s' | '--sabnzbd')
      apps__sabnzbd "set password" "$password"
            
			# Display Config Output
			echo
			sabnzbd__show_config
			;;
		'-b' | '--sickbeard')
      apps__sickbeard "set password" "$password"
            
			# Display Config Output
			echo
			sickbeard__show_config
			;;
		'-r' | '--sickrage')
      apps__sickrage "set password" "$password"
            
			# Display Config Output
			echo
			sickrage__show_config
			;; 			
		'-t' | '--transmission')
      apps__transmission "set password" "$password"
            
			# Display Config Output
			echo
			transmission__show_config
			;;
		'-d' | '--delugeweb')
      apps__delugeweb "set password" "$password"
            
			# Display Config Output
			echo
			delugeweb__show_config
			;;
		*)
			apps__help
	esac
}

function apps__set_port() {
  option="$1"
  port="$2"

	case "$option" in
		'-a' | '--all')
			echo "The 'set port' command is not available with the '--all' option"
			echo
	    exit 1
			;;   
		'-c' | '--couchpotato')
      apps__couchpotato "set port" "$port"
            
			# Display Config Output
			echo
			couchpotato__show_config
			;;
		'-h' | '--headphones')
      apps__headphones "set port" "$port"
            
			# Display Config Output
			echo
			headphones__show_config
			;;
		'-n' | '--nzbdrone')
      apps__nzbdrone "set port" "$port"
            
			# Display Config Output
			echo
			nzbdrone__show_config
			;;
		'-p' | '--plexserver')
      apps__plexserver "set port" "$port"
            
			# Display Config Output
			echo
			plexserver__show_config
			;;
		'-s' | '--sabnzbd')
      apps__sabnzbd "set port" "$port"
            
			# Display Config Output
			echo
			sabnzbd__show_config
			;;
		'-b' | '--sickbeard')
      apps__sickbeard "set port" "$port"
            
			# Display Config Output
			echo
			sickbeard__show_config
			;; 
		'-r' | '--sickrage')
      apps__sickrage "set port" "$port"
            
			# Display Config Output
			echo
			sickrage__show_config
			;;
		'-t' | '--transmission')
      apps__transmission "set port" "$port"
            
			# Display Config Output
			echo
			transmission__show_config
			;;
		'-d' | '--delugeweb')
      apps__delugeweb "set port" "$port"
            
			# Display Config Output
			echo
			delugeweb__show_config
			;;	
		*)
			apps__help
	esac
}

function apps__new_apikey() {
  option="$1"

	case "$option" in
		'-a' | '--all')
      apps__allapps "new apikey"
            
			# Display Config Output
			echo
			apps__allapps "show config"
			;;  
		'-c' | '--couchpotato')
      apps__couchpotato "new apikey"
            
			# Display Config Output
			echo
			couchpotato__show_config
			;;
		'-h' | '--headphones')
      apps__headphones "new apikey"
            
			# Display Config Output
			echo
			headphones__show_config
			;;
		'-n' | '--nzbdrone')
      apps__nzbdrone "new apikey"
            
			# Display Config Output
			echo
			nzbdrone__show_config
			;;
		'-p' | '--plexserver')
      apps__plexserver "new apikey"
            
			# Display Config Output
			echo
			plexserver__show_config
			;;
		'-s' | '--sabnzbd')
      apps__sabnzbd "new apikey"
            
			# Display Config Output
			echo
			sabnzbd__show_config
			;;
		'-b' | '--sickbeard')
      apps__sickbeard "new apikey"
            
			# Display Config Output
			echo
			sickbeard__show_config
			;;  
		'-r' | '--sickrage')
      apps__sickrage "new apikey"
            
			# Display Config Output
			echo
			sickrage__show_config
			;;	
		'-t' | '--transmission')
      apps__transmission "new apikey"
            
			# Display Config Output
			echo
			transmission__show_config
			;;
		'-d' | '--delugeweb')
      apps__delugeweb "new apikey"
            
			# Display Config Output
			echo
			delugeweb__show_config
			;;
		*)
			apps__help
	esac
}

function apps__show_config() {
  option="$1"
  
	case "$option" in
		'-a' | '--all')
      apps__allapps "show config"
			;;
		'-c' | '--couchpotato')
			couchpotato__show_config
			;;
		'-h' | '--headphones')
			headphones__show_config
			;;
		'-n' | '--nzbdrone')
			nzbdrone__show_config
			;;
		'-p' | '--plexserver')
			plexserver__show_config
			;;
		'-s' | '--sabnzbd')
			sabnzbd__show_config
			;;
		'-b' | '--sickbeard')
			sickbeard__show_config
			;;
		'-r' | '--sickrage')
			sickrage__show_config
			;;
		'-t' | '--transmission')
			transmission__show_config
			;;
		'-d' | '--delugeweb')
			delugeweb__show_config
			;;
		*)
			apps__help
	esac
}

function apps__couchpotato() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
  
    # If the app is already enabled and running there's nothing to do
    if [ "$(couchpotato__get_status)" == "Enabled|Running" ]; then
      echo "CouchPotato is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(couchpotato__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  couchpotato__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
		
		  # Install the app
			if [ "$(couchpotato__get_status)" == "Not Installed" ]; then
				couchpotato__install
			fi
			
			# Enable the app
			couchpotato__enable
			
			# Update SABnzbd+ Support
			if echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
				couchpotato__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey"
				
				sabnzbd__config_couchpotato
				sabnzbd__start
			fi
			
			# Enable Plex Server Support
			if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
				couchpotato__config_plexserver
			fi
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				couchpotato__config_proxy
				
				couchpotatoPort=$(couchpotato__get_port)
				proxy__config_couchpotato "$couchpotatoPort"
				proxy__start
			fi
			
      # Start the app
			couchpotato__start
		fi
	
	elif [ "$option" == "disable" ]; then
	  if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
	    echo "CouchPotato is already disabled"
	  else
		  couchpotato__disable
		fi
		
	elif [ "$option" == "upgrade" ]; then
	  if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
	    echo "CouchPotato is disabled"
	  else
		echo "The 'upgrade' option is disabled for CouchPotato"
		echo
		exit 1
	  fi
		
	elif [ "$option" == "set username" ]; then
	  username="$2"

	  if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
	    echo "CouchPotato is disabled"
	  else
			echo "* Configuring CouchPotato"
			couchpotato__set_username "$username"
			couchpotato__start
    fi

	elif [ "$option" == "set password" ]; then
	  password="$2"

	  if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
	    echo "CouchPotato is disabled"
	  else
			echo "* Configuring CouchPotato"
			couchpotato__set_password "$password"
			couchpotato__start
		fi
		
	elif [ "$option" == "set port" ]; then
	  port="$2"
	  
	  if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
	    echo "CouchPotato is disabled"
	  else
			echo "* Configuring CouchPotato"
			couchpotato__set_port "$port"
			couchpotato__start
			
			if echo "$(proxy__get_status)" | egrep -q "^Enabled"; then
				proxy__config_couchpotato "$port"
				proxy__start
			fi
	  fi
		
	elif [ "$option" == "new apikey" ]; then
	  if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
	    echo "CouchPotato is disabled"
	  else
	    apikey="$(tools__gen_apikey)"
			
			echo "* Configuring CouchPotato"
			couchpotato__set_apikey "$apikey"
			couchpotato__start
		fi
	fi
}

function apps__headphones() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
  
    # If the app is already enabled and running there's nothing to do
    if [ "$(headphones__get_status)" == "Enabled|Running" ]; then
      echo "Headphones is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(headphones__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  headphones__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
		
		  # Install the app
			if [ "$(headphones__get_status)" == "Not Installed" ]; then
				headphones__install
				
			# Upgrade the app
			elif headphones__version_check; then	
				headphones__upgrade
			fi
			
			# Enable the app
			headphones__enable
			
			# Update SABnzbd+ Support
			if echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)	  
				headphones__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				
				sabnzbd__config_headphones
				sabnzbd__start
			fi
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				headphones__config_proxy
				
				headphonesPort=$(headphones__get_port)
				proxy__config_headphones "$headphonesPort"
				proxy__start
			fi

      # Start the app
			headphones__start
		fi
	
	elif [ "$option" == "disable" ]; then
	  if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
	    echo "Headphones is already disabled"
	  else
		  headphones__disable
		fi
		
	elif [ "$option" == "upgrade" ]; then
	  if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
	    echo "Headphones is disabled"
	  else
			if headphones__version_check; then
				headphones__upgrade
				headphones__start
			fi
		fi
		
	elif [ "$option" == "set username" ]; then
	  username="$2"
	  
	  if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
	    echo "Headphones is disabled"
	  else
			echo "* Configuring Headphones"
			headphones__set_username "$username"
			headphones__start
		fi

	elif [ "$option" == "set password" ]; then
	  password="$2"

	  if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
	    echo "Headphones is disabled"
	  else
			echo "* Configuring Headphones"
			headphones__set_password "$password"
			headphones__start
		fi
		
	elif [ "$option" == "set port" ]; then
	  port="$2"

	  if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
	    echo "Headphones is disabled"
	  else
			echo "* Configuring Headphones"
			headphones__set_port "$port"
			headphones__start

			if echo "$(proxy__get_status)" | egrep -q "^Enabled"; then
				proxy__config_headphones "$port"
				proxy__start
			fi
	  fi
		
	elif [ "$option" == "new apikey" ]; then
	  if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
	    echo "Headphones is disabled"
	  else
	    apikey="$(tools__gen_apikey)"
	    	  
			echo "* Configuring Headphones"
			headphones__set_apikey "$apikey"
			headphones__start
		fi
	fi
}

function apps__nzbdrone() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
  
    # If the app is already enabled and running there's nothing to do
    if [ "$(nzbdrone__get_status)" == "Enabled|Running" ]; then
      echo "NzbDrone is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(nzbdrone__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  nzbdrone__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
		  echo "* Updating apt repository package lists"
			apt-get update
		
		  # Install the app
			if [ "$(nzbdrone__get_status)" == "Not Installed" ]; then
				nzbdrone__install
				
			# Upgrade the app
			elif nzbdrone__version_check; then	
				nzbdrone__upgrade
			fi
			
			# Enable the app
			nzbdrone__enable
			
			# Update SABnzbd+ Support
			if echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				nzbdrone__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				
				sabnzbd__config_nzbdrone
				sabnzbd__start
			fi

			# Enable Plex Server Support
			if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
				nzbdrone__config_plexserver
			fi
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				nzbdrone__config_proxy

				nzbdronePort=$(nzbdrone__get_port)
				proxy__config_nzbdrone "$nzbdronePort"
				proxy__start
			fi

      # Start the app
			nzbdrone__start
		fi
	
	elif [ "$option" == "disable" ]; then
	  if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
	    echo "NzbDrone is already disabled"
	  else
		  nzbdrone__disable
		fi
		
	elif [ "$option" == "upgrade" ]; then
	  if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
	    echo "NzbDrone is disabled"
	  else
			echo "* Updating apt repository package lists"
			apt-get update
		
			if nzbdrone__version_check; then
				nzbdrone__upgrade
				nzbdrone__start
			fi
		fi
		
	elif [ "$option" == "set username" ]; then
	  username="$2"
	  
	  if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
	    echo "NzbDrone is disabled"
	  else
			echo "* Configuring NzbDrone"
			nzbdrone__set_username "$username"
			nzbdrone__start
		fi

	elif [ "$option" == "set password" ]; then
	  password="$2"
	  
	  if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
	    echo "NzbDrone is disabled"
	  else
			echo "* Configuring NzbDrone"
			nzbdrone__set_password "$password"
			nzbdrone__start
	  fi
		
	elif [ "$option" == "set port" ]; then
	  port="$2"
	  
	  if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
	    echo "NzbDrone is disabled"
	  else
			echo "* Configuring NzbDrone"
			nzbdrone__set_port "$port"
			nzbdrone__start

			if echo "$(proxy__get_status)" | egrep -q "^Enabled"; then
				proxy__config_nzbdrone "$port"
				proxy__start
			fi
		fi
		
	elif [ "$option" == "new apikey" ]; then
	  if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
	    echo "NzbDrone is disabled"
	  else
			apikey="$(tools__gen_apikey)"
		
			echo "* Configuring NzbDrone"
			nzbdrone__set_apikey "$apikey"
			nzbdrone__start
		fi
	fi
}

function apps__plexserver() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
  
    # If the app is already enabled and running there's nothing to do
    if [ "$(plexserver__get_status)" == "Enabled|Running" ]; then
      echo "Plex Media Server is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(plexserver__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  plexserver__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
		
		  # Install the app
			if [ "$(plexserver__get_status)" == "Not Installed" ]; then
				plexserver__install
				
			# Upgrade the app
			else
			  if plexserver__version_check; then	
				  plexserver__upgrade
				fi
			fi
			
			# Enable the app
			plexserver__enable
			
			if echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
				couchpotato__config_plexserver
				couchpotato__start
			fi
			if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
				nzbdrone__config_plexserver
				nzbdrone__start
			fi
			if echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
				sickbeard__config_plexserver
				sickbeard__start
			fi

      # Start the app
			plexserver__start
		fi
	
	elif [ "$option" == "disable" ]; then
	  if ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
	    echo "Plex Media Server is already disabled"
	  else
		  plexserver__disable
		fi
		
	elif [ "$option" == "upgrade" ]; then
	  if ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
	    echo "Plex Media Server is disabled"
	  else
			if plexserver__version_check; then	
				plexserver__upgrade
			fi
		fi
		
	elif [ "$option" == "set username" ]; then
	  username="$2"
	  
	  if ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
	    echo "Plex Media Server is disabled"
	  else
			echo "* Configuring Plex Media Server"
			plexserver__set_plexpass_username "$username"
		fi

	elif [ "$option" == "set password" ]; then
	  password="$2"
	  
	  if ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
	    echo "Plex Media Server is disabled"
	  else
			echo "* Configuring Plex Media Server"
			plexserver__set_plexpass_password "$password"
	  fi
	  		
	elif [ "$option" == "set port" ]; then
	  echo "The 'set port' command is not available for Plex Media Server"
	  echo
	  exit 1
	  		
	elif [ "$option" == "new apikey" ]; then
	  echo "The 'new apikey' command is not available for Plex Media Server"
	  echo
	  exit 1
	fi
}

function apps__sabnzbd() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
  
    # If the app is already enabled and running there's nothing to do
    if [ "$(sabnzbd__get_status)" == "Enabled|Running" ]; then
      echo "SABnzbd+ is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(sabnzbd__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  sabnzbd__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
		  echo "* Updating apt repository package lists"
			apt-get update
		
		  # Install the app
			if [ "$(sabnzbd__get_status)" == "Not Installed" ]; then
				sabnzbd__install
				
			# Upgrade the app
			elif sabnzbd__version_check; then	
				sabnzbd__upgrade
			fi
			
			# Enable the app
			sabnzbd__enable
			
			# Get SABnzbd+ settings, will be used to update other app configs
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
			sabnzbdUser=$(sabnzbd__get_username)
			sabnzbdPass=$(sabnzbd__get_password)
			
			if echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
				sabnzbd__config_couchpotato
				
				couchpotato__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey"
				couchpotato__start
			fi
			if echo "$(headphones__get_status)" | grep -q "^Enabled"; then
				sabnzbd__config_headphones
				
				headphones__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				headphones__start
			fi
			if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
				sabnzbd__config_nzbdrone
				
				nzbdrone__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				nzbdrone__start
			fi
			if echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
				sabnzbd__config_sickbeard
				
				sickbeard__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				sickbeard__start
			fi			

      # Start the app
			sabnzbd__start
		fi
	
	elif [ "$option" == "disable" ]; then
	  if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
	    echo "SABnzbd+ is already disabled"
	  else
		  sabnzbd__disable
		fi
		
	elif [ "$option" == "upgrade" ]; then
	  if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
	    echo "SABnzbd+ is disabled"
	  else
			echo "* Updating apt repository package lists"
			apt-get update
		
			if sabnzbd__version_check; then
				sabnzbd__upgrade
				sabnzbd__start
			fi
		fi
		
	elif [ "$option" == "set username" ]; then
	  username="$2"
	  
	  if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
	    echo "SABnzbd+ is disabled"
	  else
			echo "* Configuring SABnzbd+"
			sabnzbd__set_username "$username"
			sabnzbd__start

			if echo "$(headphones__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				headphones__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				headphones__start
			fi
			if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				nzbdrone__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				nzbdrone__start
			fi
			if echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				sickbeard__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				sickbeard__start
			fi
		fi

	elif [ "$option" == "set password" ]; then
	  password="$2"

	  if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
	    echo "SABnzbd+ is disabled"
	  else
			echo "* Configuring SABnzbd+"
			sabnzbd__set_password "$password"
			sabnzbd__start

			if echo "$(headphones__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				headphones__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				headphones__start
			fi
			if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				nzbdrone__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				nzbdrone__start
			fi
			if echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				sickbeard__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				sickbeard__start
			fi
		fi
		
	elif [ "$option" == "set port" ]; then
	  port="$2"

	  if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
	    echo "SABnzbd+ is disabled"
	  else	  
			echo "* Configuring SABnzbd+"
			sabnzbd__set_port "$port"
			sabnzbd__start

			if echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
				couchpotato__config_sabnzbd "$sabnzbdUser" "$sabnzbdPass"
				couchpotato__start
			fi
			if echo "$(headphones__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				headphones__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				headphones__start
			fi
			if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				nzbdrone__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				nzbdrone__start
			fi
			if echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				sickbeard__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				sickbeard__start
			fi
		
			if echo "$(proxy__get_status)" | egrep -q "^Enabled"; then
				proxy__config_sabnzbd "$port"
				proxy__start
			fi
		fi
		
	elif [ "$option" == "new apikey" ]; then
	  if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
	    echo "SABnzbd+ is disabled"
	  else
			apikey="$(tools__gen_apikey)"
		
			echo "* Configuring SABnzbd+"
			sabnzbd__set_apikey "$apikey"
			sabnzbd__start

			if echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
				couchpotato__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey"
				couchpotato__start
			fi
			if echo "$(headphones__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				headphones__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				headphones__start
			fi
			if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				nzbdrone__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				nzbdrone__start
			fi
			if echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				sickbeard__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				sickbeard__start
			fi
		fi
	fi
}

function apps__sickbeard() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
  
    # If the app is already enabled and running there's nothing to do
    if [ "$(sickbeard__get_status)" == "Enabled|Running" ]; then
      echo "Sick Beard is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(sickbeard__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  sickbeard__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
		
		  # Install the app
			if [ "$(sickbeard__get_status)" == "Not Installed" ]; then
				sickbeard__install
				
			# Upgrade the app
			elif sickbeard__version_check; then	
				sickbeard__upgrade
			fi
			
			# Enable the app
			sickbeard__enable
			
			# Update SABnzbd+ Support
			if echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				sickbeard__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				
				sabnzbd__config_sickbeard
				sabnzbd__start
			fi

			# Enable Plex Server Support
			if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
				sickbeard__config_plexserver
			fi
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				sickbeard__config_proxy
				
				sickbeardPort=$(sickbeard__get_port)
				proxy__config_sickbeard "$sickbeardPort"
				proxy__start
			fi

      # Start the app
			sickbeard__start
		fi
	
	elif [ "$option" == "disable" ]; then
	  if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Beard is already disabled"
	  else
		  sickbeard__disable
		fi
		
	elif [ "$option" == "upgrade" ]; then
	  if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Beard is disabled"
	  else
			if sickbeard__version_check; then
				sickbeard__upgrade
				sickbeard__start
			fi
		fi
		
	elif [ "$option" == "set username" ]; then
	  username="$2"
	  
	  if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Beard is disabled"
	  else
			echo "* Configuring Sick Beard"
			sickbeard__set_username "$username"
			sickbeard__start
		fi

	elif [ "$option" == "set password" ]; then
	  password="$2"

	  if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Beard is disabled"
	  else
			echo "* Configuring Sick Beard"
			sickbeard__set_password "$password"
			sickbeard__start
		fi
		
	elif [ "$option" == "set port" ]; then
	  port="$2"

	  if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Beard is disabled"
	  else	  
			echo "* Configuring Sick Beard"
			sickbeard__set_port "$port"
			sickbeard__start
		
			if echo "$(proxy__get_status)" | egrep -q "^Enabled"; then
				proxy__config_sickbeard "$port"
				proxy__start
			fi
		fi
		
	elif [ "$option" == "new apikey" ]; then
	  if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Beard is disabled"
	  else
			apikey="$(tools__gen_apikey)"
		
			echo "* Configuring Sick Beard"
			sickbeard__set_apikey "$apikey"
			sickbeard__start
		fi
	fi
}

function apps__sickrage() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
  
    # If the app is already enabled and running there's nothing to do
    if [ "$(sickrage__get_status)" == "Enabled|Running" ]; then
      echo "Sick Rage is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(sickrage__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  sickrage__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(sickrage__get_status)" | grep -q "^Enabled"; then
		
		  # Install the app
			if [ "$(sickrage__get_status)" == "Not Installed" ]; then
				sickrage__install
				
			# Upgrade the app
			elif sickrage__version_check; then	
				sickrage__upgrade
			fi
			
			# Enable the app
			sickrage__enable
			
			# Update SABnzbd+ Support
			if echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
			  sabnzbdPort=$(sabnzbd__get_port)
			  sabnzbdAPIkey=$(sabnzbd__get_apikey)
			  sabnzbdUser=$(sabnzbd__get_username)
			  sabnzbdPass=$(sabnzbd__get_password)
				sickrage__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
				
				sabnzbd__config_sickrage
				sabnzbd__start
			fi

			# Enable Plex Server Support
			if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
				sickrage__config_plexserver
			fi
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				sickrage__config_proxy
				
				sickragePort=$(sickrage__get_port)
				proxy__config_sickrage "$sickragePort"
				proxy__start
			fi

      # Start the app
			sickrage__start
		fi
	
	elif [ "$option" == "disable" ]; then
	  if ! echo "$(sickrage__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Rage is already disabled"
	  else
		  sickrage__disable
		fi
		
	elif [ "$option" == "upgrade" ]; then
	  if ! echo "$(sickrage__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Rage is disabled"
	  else
			if sickrage__version_check; then
				sickrage__upgrade
				sickrage__start
			fi
		fi
		
	elif [ "$option" == "set username" ]; then
	  username="$2"
	  
	  if ! echo "$(sickrage__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Rage is disabled"
	  else
			echo "* Configuring Sick Rage"
			sickrage__set_username "$username"
			sickrage__start
		fi

	elif [ "$option" == "set password" ]; then
	  password="$2"

	  if ! echo "$(sickrage__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Rage is disabled"
	  else
			echo "* Configuring Sick Rage"
			sickrage__set_password "$password"
			sickrage__start
		fi
		
	elif [ "$option" == "set port" ]; then
	  port="$2"

	  if ! echo "$(sickrage__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Rage is disabled"
	  else	  
			echo "* Configuring Sick Rage"
			sickrage__set_port "$port"
			sickrage__start
		
			if echo "$(proxy__get_status)" | egrep -q "^Enabled"; then
				proxy__config_sickrage "$port"
				proxy__start
			fi
		fi
		
	elif [ "$option" == "new apikey" ]; then
	  if ! echo "$(sickrage__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Rage is disabled"
	  else
			apikey="$(tools__gen_apikey)"
		
			echo "* Configuring Sick Rage"
			sickrage__set_apikey "$apikey"
			sickrage__start
		fi
	fi
}

function apps__transmission() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
  
    # If the app is already enabled and running there's nothing to do
    if [ "$(transmission__get_status)" == "Enabled|Running" ]; then
      echo "Transmission is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(transmission__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  transmission__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
			echo "* Updating apt repository package lists"
			apt-get update
			
		  # Install the app
			if [ "$(transmission__get_status)" == "Not Installed" ]; then
				transmission__install
				
			# Upgrade the app
			elif transmission__version_check; then	
				transmission__upgrade
			fi
			
			# Enable the app
			transmission__enable
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				transmissionPort=$(transmission__get_port)
				proxy__config_transmission "$transmissionPort"
				proxy__start
			fi

      # Start the app
			transmission__start
		fi
	
	elif [ "$option" == "disable" ]; then
	  if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is already disabled"
	  else
		  transmission__disable
		fi
		
	elif [ "$option" == "upgrade" ]; then
	  if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is disabled"
	  else
			echo "* Updating apt repository package lists"
			apt-get update
		
			if transmission__version_check; then
				transmission__upgrade
				transmission__start
			fi
		fi
		
	elif [ "$option" == "set username" ]; then
	  username="$2"
	  
	  if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is disabled"
	  else
			echo "* Configuring Transmission"
			transmission__set_username "$username"
			transmission__start
		fi

	elif [ "$option" == "set password" ]; then
	  password="$2"
	  
	  if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is disabled"
	  else
			echo "* Configuring Transmission"
			transmission__set_password "$password"
			transmission__start
		fi
		
	elif [ "$option" == "set port" ]; then
	  port="$2"
	  
	  if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is disabled"
	  else
			echo "* Configuring Transmission"
			transmission__set_port "$port"
			transmission__start
			
			if echo "$(proxy__get_status)" | egrep -q "^Enabled"; then
				proxy__config_transmission "$port"
				proxy__start
			fi
		fi
		
	elif [ "$option" == "new apikey" ]; then
	  echo "The 'new apikey' command is not available for Transmission"
	  echo
	  exit 1
	fi
}

function apps__delugeweb() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
  
    # If the app is already enabled and running there's nothing to do
    if [ "$(delugeweb__get_status)" == "Enabled|Running" ]; then
      echo "Deluge-Web is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(delugeweb__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  delugeweb__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(delugeweb__get_status)" | grep -q "^Enabled"; then
			echo "* Updating apt repository package lists"
			apt-get update
			
		  # Install the app
			if [ "$(delugeweb__get_status)" == "Not Installed" ]; then
				delugeweb__install
				
			# Upgrade the app
			elif delugeweb__version_check; then	
				delugeweb__upgrade
			fi
			
			# Enable the app
			delugeweb__enable
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				delugewebPort=$(delugeweb__get_port)
				proxy__config_delugeweb "$delugewebPort"
				proxy__start
			fi

      # Start the app
			delugeweb__start
		fi
	
	elif [ "$option" == "disable" ]; then
	  if ! echo "$(delugeweb__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is already disabled"
	  else
		  delugeweb__disable
		fi
		
	elif [ "$option" == "upgrade" ]; then
	  if ! echo "$(delugeweb__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is disabled"
	  else
			echo "* Updating apt repository package lists"
			apt-get update
		
			if delugeweb__version_check; then
				delugeweb__upgrade
				delugeweb__start
			fi
		fi
		
	elif [ "$option" == "set username" ]; then
	  username="$2"
	  
	  if ! echo "$(delugeweb__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is disabled"
	  else
			echo "* Configuring Transmission"
			delugeweb__set_username "$username"
			delugeweb__start
		fi

	elif [ "$option" == "set password" ]; then
	  password="$2"
	  
	  if ! echo "$(delugeweb__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is disabled"
	  else
			echo "* Configuring Transmission"
			delugeweb__set_password "$password"
			delugeweb__start
		fi
		
	elif [ "$option" == "set port" ]; then
	  port="$2"
	  
	  if ! echo "$(delugeweb__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is disabled"
	  else
			echo "* Configuring Transmission"
			delugeweb__set_port "$port"
			delugeweb__start
			
			if echo "$(proxy__get_status)" | egrep -q "^Enabled"; then
				proxy__config_delugeweb "$port"
				proxy__start
			fi
		fi
		
	elif [ "$option" == "new apikey" ]; then
	  echo "The 'new apikey' command is not available for Transmission"
	  echo
	  exit 1
	fi
}


function apps__allapps() {
  option="$1"
  
  if [ "$option" == "enable" ]; then
		echo "* Updating apt repository package lists"
		apt-get update
		
		# Make sure all apps are installed first
		if [ "$(couchpotato__get_status)" == "Not Installed" ]; then
			couchpotato__install
		fi
		if [ "$(headphones__get_status)" == "Not Installed" ]; then
			headphones__install
		fi
		if [ "$(nzbdrone__get_status)" == "Not Installed" ]; then
			nzbdrone__install
		fi
		if [ "$(plexserver__get_status)" == "Not Installed" ]; then
			plexserver__install
		fi
		if [ "$(sabnzbd__get_status)" == "Not Installed" ]; then
			sabnzbd__install
		fi
		if [ "$(sickbeard__get_status)" == "Not Installed" ]; then
			sickbeard__install
		fi
		if [ "$(sickrage__get_status)" == "Not Installed" ]; then
			sickrage__install
		fi
		if [ "$(transmission__get_status)" == "Not Installed" ]; then
			transmission__install
		fi
		if [ "$(delugeweb__get_status)" == "Not Installed" ]; then
			delugeweb__install
		fi		
		

		# CouchPotato Section
		# ---------------------------

    # If the app is already enabled and running there's nothing to do
    if [ "$(couchpotato__get_status)" == "Enabled|Running" ]; then
      echo "CouchPotato is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(couchpotato__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  couchpotato__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then

			
			# Enable the app
			couchpotato__enable
			
		  # Update SABnzbd+ Support
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
			couchpotato__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey"
	
		  # Enable Plex Server Support
			couchpotato__config_plexserver
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
			  couchpotato__config_proxy
			  
				couchpotatoPort=$(couchpotato__get_port)
				proxy__config_couchpotato "$couchpotatoPort"
				proxy__start
			fi
			
      # Start the app
			couchpotato__start
		fi
		
		# Headphones Section
		# ---------------------------

    # If the app is already enabled and running there's nothing to do
    if [ "$(headphones__get_status)" == "Enabled|Running" ]; then
      echo "Headphones is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(headphones__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  headphones__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
		
		  # Upgrade the app
			if headphones__version_check; then	
			  headphones__upgrade
      fi
			
			# Enable the app
			headphones__enable
			
			# Update SABnzbd+ Support
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
			sabnzbdUser=$(sabnzbd__get_username)
			sabnzbdPass=$(sabnzbd__get_password)		  
			headphones__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"

			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
			  headphones__config_proxy
			  
				headphonesPort=$(headphones__get_port)
				proxy__config_headphones "$headphonesPort"
				proxy__start
			fi

      # Start the app
			headphones__start
		fi		
		
		# NzbDrone Section
		# ---------------------------

    # If the app is already enabled and running there's nothing to do
    if [ "$(nzbdrone__get_status)" == "Enabled|Running" ]; then
      echo "NzbDrone is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(nzbdrone__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  nzbdrone__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
				
			# Upgrade the app
			if nzbdrone__version_check; then	
				nzbdrone__upgrade
			fi
			
			# Enable the app
			nzbdrone__enable
			
			# Update SABnzbd+ Support
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
			sabnzbdUser=$(sabnzbd__get_username)
			sabnzbdPass=$(sabnzbd__get_password)
			nzbdrone__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"

			# Enable Plex Server Support
			nzbdrone__config_plexserver
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
			  nzbdrone__config_proxy
			  
				nzbdronePort=$(nzbdrone__get_port)
				proxy__config_nzbdrone "$nzbdronePort"
				proxy__start
			fi

      # Start the app
			nzbdrone__start
		fi
		
		# Plex Media Server Section
		# ---------------------------
		
    # If the app is already enabled and running there's nothing to do
    if [ "$(plexserver__get_status)" == "Enabled|Running" ]; then
      echo "Plex Media Server is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(plexserver__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  plexserver__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
				
			# Upgrade the app
			if plexserver__version_check; then	
				plexserver__upgrade
			fi
			
			# Enable the app
			plexserver__enable

      # Start the app
			plexserver__start
		fi
		
		# SABnzbd+ Section
		# ---------------------------

    # If the app is already enabled and running there's nothing to do
    if [ "$(sabnzbd__get_status)" == "Enabled|Running" ]; then
      echo "SABnzbd+ is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(sabnzbd__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  sabnzbd__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then

			# Upgrade the app
			if sabnzbd__version_check; then	
				sabnzbd__upgrade
			fi
			
			# Enable the app
			sabnzbd__enable

			sabnzbd__config_couchpotato
			sabnzbd__config_headphones
			sabnzbd__config_nzbdrone
			sabnzbd__config_sickbeard
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				sabnzbdPort=$(sabnzbd__get_port)
				proxy__config_sabnzbd "$sabnzbdPort"
				proxy__start
			fi

      # Start the app
			sabnzbd__start
		fi
		
		# Sick Beard Section
		# ---------------------------
		
    # If the app is already enabled and running there's nothing to do
    if [ "$(sickbeard__get_status)" == "Enabled|Running" ]; then
      echo "Sick Beard is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(sickbeard__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  sickbeard__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then

			# Upgrade the app
			if sickbeard__version_check; then	
				sickbeard__upgrade
			fi
			
			# Enable the app
			sickbeard__enable
			
			# Update SABnzbd+ Support
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
			sabnzbdUser=$(sabnzbd__get_username)
			sabnzbdPass=$(sabnzbd__get_password)
			sickbeard__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"

			# Enable Plex Server Support
			sickbeard__config_plexserver
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
			  sickbeard__config_proxy
			  
				sickbeardPort=$(sickbeard__get_port)
				proxy__config_sickbeard "$sickbeardPort"
				proxy__start
			fi

      # Start the app
			sickbeard__start
		fi
		
		# Sick Rage Section
		# ---------------------------
		
    # If the app is already enabled and running there's nothing to do
    if [ "$(sickrage__get_status)" == "Enabled|Running" ]; then
      echo "Sick Rage is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(sickrage__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  sickrage__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(sickrage__get_status)" | grep -q "^Enabled"; then

			# Upgrade the app
			if sickrage__version_check; then	
				sickrage__upgrade
			fi
			
			# Enable the app
			sickrage__enable
			
			# Update SABnzbd+ Support
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
			sabnzbdUser=$(sabnzbd__get_username)
			sabnzbdPass=$(sabnzbd__get_password)
			sickrage__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"

			# Enable Plex Server Support
			sickrage__config_plexserver
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
			  sickrage__config_proxy
			  
				sickragePort=$(sickrage__get_port)
				proxy__config_sickrage "$sickragePort"
				proxy__start
			fi

      # Start the app
			sickrage__start
		fi

		# Transmission Section
		# ---------------------------

    # If the app is already enabled and running there's nothing to do
    if [ "$(transmission__get_status)" == "Enabled|Running" ]; then
      echo "Transmission is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(transmission__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  transmission__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then

			# Upgrade the app
			if transmission__version_check; then	
				transmission__upgrade
			fi
			
			# Enable the app
			transmission__enable
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				transmissionPort=$(transmission__get_port)
				proxy__config_transmission "$transmissionPort"
				proxy__start
			fi

      # Start the app
			transmission__start
		fi
		
		# Deluge-Web Section
		# ---------------------------

    # If the app is already enabled and running there's nothing to do
    if [ "$(delugeweb__get_status)" == "Enabled|Running" ]; then
      echo "Deluge-Web is already enabled"
    
    # If the app is already enabled but stopped, start the app
    elif [ "$(delugeweb__get_status)" == "Enabled|Stopped" ]; then
		  # Start the app
		  delugeweb__start
		  
		# If the app is not enabled, Install (or Upgrade) the app as needed, update
		# the config as necessary to support the other associated apps and start the app
		elif ! echo "$(delugeweb__get_status)" | grep -q "^Enabled"; then

			# Upgrade the app
			if delugeweb__version_check; then	
				delugeweb__upgrade
			fi
			
			# Enable the app
			delugeweb__enable
			
			# Enable Reverse Proxy Support
			if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
				delugewebPort=$(delugeweb__get_port)
				proxy__config_delugeweb "$delugewebPort"
				proxy__start
			fi

      # Start the app
			delugeweb__start
		fi
		
	elif [ "$option" == "disable" ]; then
	  apps__couchpotato "disable"
	  apps__headphones "disable"
	  apps__nzbdrone "disable"
	  apps__plexserver "disable"
	  apps__sabnzbd "disable"
	  apps__sickbeard "disable"
	  apps__sickrage "disable"
	  apps__transmission "disable"
	  apps__delugeweb "disable"

	elif [ "$option" == "upgrade" ]; then  
		echo "* Updating apt repository package lists"
		apt-get update

		# CouchPotato Section
		# ---------------------------
	  if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
	    echo "CouchPotato is disabled"
	  else
		echo "The 'upgrade' option is disabled for CouchPotato"
      fi
			
		# Headphones Section
		# ---------------------------
	  if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
	    echo "Headphones is disabled"
	  else
			if headphones__version_check; then
				headphones__upgrade
				headphones__start
			fi
    fi
    		
		# NzbDrone Section
		# ---------------------------
	  if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
	    echo "NzbDrone is disabled"
	  else
			if nzbdrone__version_check; then
				nzbdrone__upgrade
				nzbdrone__start
			fi
    fi
    		
		# Plex Media Server Section
		# ---------------------------
	  if ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
	    echo "Plex Media Server is disabled"
	  else
			if plexserver__version_check; then
				plexserver__upgrade
			fi
    fi
    		
		# SABnzbd+ Section
		# ---------------------------
	  if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
	    echo "SABnzbd+ is disabled"
	  else
			if sabnzbd__version_check; then
				sabnzbd__upgrade
				sabnzbd__start
			fi
    fi
    		
		# Sick Beard Section
		# ---------------------------
	  if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Beard is disabled"
	  else
			if sickbeard__version_check; then
				sickbeard__upgrade
				sickbeard__start
			fi
    fi
		
		# Sick Rage Section
		# ---------------------------
	  if ! echo "$(sickrage__get_status)" | grep -q "^Enabled"; then
	    echo "Sick Beard is disabled"
	  else
			if sickrage__version_check; then
				sickrage__upgrade
				sickrage__start
			fi
    fi
    
		# Transmission Section
		# ---------------------------
	  if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
	    echo "Transmission is disabled"
	  else
			if transmission__version_check; then
				transmission__upgrade
				transmission__start
			fi
    fi
	
		# Deluge-Web Section
		# ---------------------------
	  if ! echo "$(delugeweb__get_status)" | grep -q "^Enabled"; then
	    echo "Deluge-Web is disabled"
	  else
			if delugeweb__version_check; then
				delugeweb__upgrade
				delugeweb__start
			fi
    fi
    
  elif [ "$option" == "set username" ]; then
	  username="$2"

	  apps__couchpotato "set username" "$username"
	  apps__headphones "set username" "$username"
	  apps__nzbdrone "set username" "$username"
	  apps__plexserver "set username" "$username"
	  apps__sabnzbd "set username" "$username"
	  apps__sickbeard "set username" "$username"
	  apps__sickrage "set username" "$username"
	  apps__transmission "set username" "$username"
	  apps__delugeweb "set username" "$username"

  elif [ "$option" == "set password" ]; then
	  password="$2"

	  apps__couchpotato "set password" "$password"
	  apps__headphones "set password" "$password"
	  apps__nzbdrone "set password" "$password"
	  apps__plexserver "set password" "$password"
	  apps__sabnzbd "set password" "$password"
	  apps__sickbeard "set password" "$password"
	  apps__sickrage "set password" "$password"
	  apps__transmission "set password" "$password"
	  apps__delugeweb "set password" "$password"
	  
  elif [ "$option" == "new apikey" ]; then
	  apps__couchpotato "new apikey"
	  apps__headphones "new apikey"
	  apps__nzbdrone "new apikey"
	  apps__plexserver "new apikey"
	  apps__sabnzbd "new apikey"
	  apps__sickbeard "new apikey"
	  apps__sickrage "new apikey"
	  apps__transmission "new apikey"
	  apps__delugeweb "new apikey"
	
	elif [ "$option" == "show config" ]; then
		tmpfile="/tmp/showconfig.out"

		(couchpotato__show_config) > $tmpfile
		echo >> $tmpfile
		echo >> $tmpfile
		(headphones__show_config) >> $tmpfile
		echo >> $tmpfile
		echo >> $tmpfile
		(nzbdrone__show_config) >> $tmpfile
		echo >> $tmpfile
		echo >> $tmpfile
		(plexserver__show_config) >> $tmpfile
		echo >> $tmpfile
		echo >> $tmpfile
		(sabnzbd__show_config) >> $tmpfile
		echo >> $tmpfile
		echo >> $tmpfile
		(sickbeard__show_config) >> $tmpfile
		echo >> $tmpfile
		echo >> $tmpfile
		(sickrage__show_config) >> $tmpfile
		echo >> $tmpfile
		echo >> $tmpfile
		(delugeweb__show_config) >> $tmpfile
		echo >> $tmpfile
		echo >> $tmpfile
		(transmission__show_config) >> $tmpfile

		cat $tmpfile | more
		rm -f $tmpfile > /dev/null 2>&1
	fi
}
